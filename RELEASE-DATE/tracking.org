TRACKING 2017  -*- mode: org; -*-

#+TODO: TODO IN-PROGRESS PENDING DONE

* IN-PROGRESS Sharelatex logs analysis
  SCHEDULED: <2017-07-31 Mon> 
** IN-PROGRESS Reading
*** Supporting Adaptable Granularity of Changes for Massive-scale Collaborative Editing, Luc Andre, 2013

** IN-PROGRESS Understand Sharelatex log 
   SCHEDULED: <2017-07-07 Fri>
   1. work with sharelatex local server
   2. understand sharelatex logs (https://github.com/oster/sharelatex-analysis)

** IN-PROGRESS Categorize basic actions (insert, delete) to higher-level actions
   SCHEDULED: <2017-07-28 Fri>
*** user connect/disconnect actions --> 'active' periods which has large number of users editing in concurrently
    - condiser the case in which user switches to other tab (sharelatex tab becomes inactive) and switches back to sharelatex tab (reactive)
*** Categorize user actions at higher-level suchs as spelling correction, layout formation, refecencing...
    - Basic actions in sharelatex (?)
    - categorize users by their actions/contribution to the working document?
    - Analysis on how  user actions affect to the quality of the document?
    - Which kinds of user often made conflicts with others when they work simultanously.
 

* DONE Extending "Parallelism and conflicting changes in Git version control systems"
  DEADLINE: <2017-05-05 Fri>
** DONE Analysing integration and conflicts based on release date
*** Analyze 4 weeks before and 4 weeks after each release date (version)
    - B4W, B3W, B2W, B1W
    - A4W, A3W, A2W, A1W
*** Focus on : Integration rate, Conflict rate and Conflict types
*** Finding: 
    - IkiWiki(V3.0) and Samba (V3.2, V3.3) used `old integration style' : collaboration works submitted one week before release date (RD)
    - Samba V3.6 : used pre-candidate and release-candidate version before the official release.
    - Rails: old style (V3.1) --> changed on (V3.2, V4.0): integrating on B2W, not B1W. ---> changed on (V4.1, V4.2) : integrating in (B1W-A1W)
    - Linux Kernel: used "merge window", had an unsual integration in V3.19
     
** DONE About git diff algorithm & adjacent line 
- Diff3(A,O,B) relies on the outputs of diff(O,A) and diff(O,B) which are trying to find the longest matched string. If there are two  matched strings with same length, the output is unstable.
- Diff3 can not merge adjacent-line case.
- Git uses 'snapshot' storage method, Darcs uses 'changeset' and Svn uses both 'snapshot' and 'changeset' storage method.
- To merge adjacen-line case, Git need to modified Diff3 or need to use extra info such as 'changeset'
** DONE Reading papers about git diff algorithms
1. An O(ND) Difference Algorithm and Its Variations, EUGENE W. MYERS, 1986     #used by Git
   - desirable properties of the DIFF
     + as small as posible
     + prefer: deletions than insertions  
     + more intuitive meaning    
  - Myers's algorithm: 
     + DIFF(a,b) , a = ABCABBA, b= CBABAC ===> find shortest path from (0,0) to (7,6)
        
       A     B     C     A     B     B     A
    o-----o-----o-----o-----o-----o-----o-----o   0
    |     |     | \   |     |     |     |     |
C   |     |     |  \  |     |     |     |     |
    |     |     |   \ |     |     |     |     |
    o-----o-----o-----o-----o-----o-----o-----o   1
    |     | \   |     |     | \   | \   |     |
B   |     |  \  |     |     |  \  |  \  |     |
    |     |   \ |     |     |   \ |   \ |     |
    o-----o-----o-----o-----o-----o-----o-----o   2
    | \   |     |     | \   |     |     | \   |
A   |  \  |     |     |  \  |     |     |  \  |
    |   \ |     |     |   \ |     |     |   \ |
    o-----o-----o-----o-----o-----o-----o-----o   3
    |     | \   |     |     | \   | \   |     |
B   |     |  \  |     |     |  \  |  \  |     |
    |     |   \ |     |     |   \ |   \ |     |
    o-----o-----o-----o-----o-----o-----o-----o   4
    | \   |     |     | \   |     |     | \   |
A   |  \  |     |     |  \  |     |     |  \  |
    |   \ |     |     |   \ |     |     |   \ |
    o-----o-----o-----o-----o-----o-----o-----o   5
    |     |     | \   |     |     |     |     |
C   |     |     |  \  |     |     |     |     |
    |     |     |   \ |     |     |     |     |
    o-----o-----o-----o-----o-----o-----o-----o   6
    0     1     2     3     4     5     6     7
   
     + d: number of steps; k= x - y, rightward: x+ --> k+, downward: y+ --> k-
     + for each (d,k): store  higher_x OR rightward movement (x+-->k+)

      k |   -3    -2    -1     0     1     2     3     4
--------+-----------------------------------------------
        |
  d = 0 |                      0
        |
  d = 1 |                0     0     1
        |
  d = 2 |          2     0     2     1     3
        |
  d = 3 |    3     2     4     2     5     3     5
        |
  d = 4 |    3     4     4     5     5     7     5     7
        |
  d = 5 |    3     4     5     5     7     7     5     7

     + backtracking: (0,0) -> (1,0) -> (3,1) -> (5,4) -> (7,5) -> (7,6)
     + final output: DIFF('ABCABBA','CBABAC')
      # -    1         A
      # -    2         B
      #      3    1    C
      # +         2    B
      #      4    3    A
      #      5    4    B
      # -    6         B
      #      7    5    A
      # +         6    C

   - APPLYING FOR adjacent-line case: 
         diff (ABC,A'BC)            diff (ABC,AB'C)                 diff3 (ABC, A'BC, AB'C)
       # -    1         A         #      1    1    A           # 1     A    A'   A   | block of 2 lines ---      
       # +         1    A'        # -    2         B           # 2     B    B    B'  | block_original <> block_1 <> block_2 ==>conflict
       #      2    2    B         # +         2    B'          # 
       #      3    3    C         #      3    3    c           # 3     C    C    C   | block of 1 line ---unchanged

2. A Formal Investigation of Diff3, Sanjeev Khana, 2007
   - Diff3(A,O,B) uses outputs for Diff(O,A) and Diff(O,B).
   - Diff3 does not guarantee that if changes are 'well separated', they will be merge successfully.

   



